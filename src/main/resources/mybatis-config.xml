<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
       "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- mybatis可以使用properties引入 外部properties配置文件的内容
         resource：引入类路径下的资源
         url：引入网络路径或磁盘路径下的资源
     -->
     <!--引入外部配置文件-->
	<!-- <properties resource="jdbc.properties"> 
	
	</properties> -->
	  
	  <!--settings包含很多重要设置项
	  setting用来设置每个设置项
	  name:设置项名
	  value:设置取值--> 
	  <settings>
	  	<!--  开启投放命名下划线和大写字母之间的转换 默认value=false  -->
	  	 <setting name="mapUnderscoreToCamelCase" value="true"/>
	  	 <!--lazyLoadingEnabled延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
	           特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 
	    aggressiveLazyLoading开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载-->
	  	 <setting name="lazyLoadingEnabled" value="true"/>
	     <setting name="aggressiveLazyLoading" value="false"/>
	  </settings>
	  
	  

	  
	  <!-- <typeAliases>
	    typeAlias为某个类型起别名(即给实体类起一个别名）
	         type：指定要别名的类型全类名，默认别名就是类名小写：employee 
	         alias：指定别名
	    
	     <typeAlias type="com.yg.mybatis.pojo.Employee" alias="emp"/>
	     
	    package:为某个包下的所有类批量起别名
	         name：指定包名（为当前包以及下面所有后代包的每个类都起一个别名） 别名为：类名小写
	     
	   <package name="com.yg.mybatis.pojo"/>
	    如果有重复的别名想要单独起别名；在类的包下面用@Alias注释
	  </typeAliases>


默认环境
	<environments default="development">
		配置具体环境信息： id唯一标识
		必须有transactionManager：事务管理器和dataSources:数据源
		type:事务管理器类型 JDBC/MANAGED
		   1）JDBC:使用了JDBC的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围（jdbcTransactionFactory)
		   2）MANAGED:不提交或回滚一个连接，让容器来管理事务的整个生命周期（比如JEE应用服务器的上下文） （ManagedTransactionFactory)
		   3）自定义事务管理器：实现TransactionFactory接口 type指定为全类名
		
		dataSources:数据源
		type:数据源类型：1）UNPOOLED(UnpooledDataSourceFactory)
		                2）POOLED(PooledDataSourceFactory)
		                3）JNDI(JndiDataSourceFactory）
		                4）  自定义：实现DataSourceFactory接口，type:全类名
		                
		    测试环境
		  <environment id="test">   
		     <transactionManager type="JDBC">   </transactionManager>
		     <dataSource type="POOLED">   </dataSource>
		  </environment>
		                
		   生产环境     
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
			手动配置
				<property name="driver" value="com.mysql.cj.jdbc.Driver" />
				<property name="url" value="jdbc:mysql://localhost:3306/demo?serverTimezone=GMT%2B8" />
				<property name="username" value="root" />
				<property name="password" value="root" />
			
		引入外部配置文件
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
				
			</dataSource>
		</environment>
	</environments>
	<mappers>
		注册一个sql映射
		方式1：recourse:引用类路径下的 sql映射文件
		方式2：url：引用网络路径或者磁盘路径的sql映射文件
		方式3：class：引用注册接口
		1）有sql映射文件,映射的文件名（EmployeeMapper.xml）必须和接口同名，并且放在与接口同一目录下(可将EmployeeMapper.xml
		移动到dao层，也可在config下新建一个com.yg.mybatis.dao并把EmployeeMapper类放到改包底下）
		2）没有sql映射文件，所有的sql都是利用注解写在接口上
		推荐：
		重要的用映射文件
		不重要，复杂的使用注解
		<mapper resource="EmployeeMapper.xml" />
		<mapper resource="DeptartmentMapper.xml"/>
		<mapper class="com.yg.mybatis.dao.EmployeeMapperAnnotation"/>
		<mapper class="com.yg.mybatis.dao.EmployeeMapper"/>
		
		批量操作(可注册多个sql映射文件）
		1）有sql映射文件,映射的文件名（EmployeeMapper.xml）必须和接口同名，并且放在与接口同一目录下(可将EmployeeMapper.xml
		移动到dao层，也可在config下新建一个com.yg.mybatis.dao并把EmployeeMapper类放到改包底下）
		2）没有sql映射文件，所有的sql都是利用注解写在接口上
		<package name="com.yg.mybatis.dao"/>
		
		
		
		
		
		
	</mappers> -->
</configuration>






